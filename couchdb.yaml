- hosts: magareta
  vars:
    couchdb_home: /opt/couchdb
    local_config_url: "http://127.0.0.1:5984/_node/couchdb@{{ansible_host}}/_config"
    packages: [build-essential, pkg-config, erlang, erlang-reltool, libicu-dev, libmozjs185-dev, libcurl4-openssl-dev, python-sphinx, python-sphinx-rtd-theme]
    build_dir: "/home/alek/couchdb-build" # not in temp because we run out of space
    ssl_cacert_file: "/etc/letsencrypt/live/magare.otselo.eu/fullchain.pem"
    ssl_cert_file: "/etc/letsencrypt/live/magare.otselo.eu/cert.pem"
    ssl_key_file: "/etc/letsencrypt/live/magare.otselo.eu/privkey.pem"
  tasks:
    - name: check couchdb binary
      become: yes
      become_method: sudo 
      stat:
        path: "{{ couchdb_home }}/bin/couchdb"
      register: sym

    - name: install couchdb
      when: sym.stat.islnk is not defined
      block:
      - name: as sudo
        become: yes
        become_method: sudo
        block:
        - name: install dependencies from apt
          apt:
            name: "{{ item }}"
          with_items: "{{ packages }}"

        - name: add nodesource nodejs 10 repository
          shell: |
            curl -sL https://deb.nodesource.com/setup_10.x | sudo bash -

        - name: install nodejs
          apt:
            name: nodejs

      - name: create build directory
        file: 
          path: "{{ build_dir }}"
          state: directory

      - name: clone latest couchdb from git
        git:
          repo: https://github.com/apache/couchdb
          dest: "{{ build_dir }}/couchdb"
          clone: yes

      - name: configure
        command: ./configure
        args:
          chdir: "{{ build_dir }}/couchdb"

      - name: make
        make:
          chdir: "{{ build_dir }}/couchdb"
        ignore_errors: yes
        register: make_result

      - name: make release
        make:
          target: release
          chdir: "{{ build_dir }}/couchdb"
        ignore_errors: yes
        register: make_result
      
      - name: ignore known documentation build failure
        fail: 
        when: make_result.failed and "cannot stat 'src/docs/build/man/apachecouchdb" not in make_result.msg
     
      - name: as sudo
        become: yes
        become_method: sudo
        block:
        - name: add couchdb user
          user:
            name: couchdb
            comment: "CouchDB Administrator"
            shell: /bin/bash
            system: yes
            group: 
            home: /opt/couchdb
            createhome: no

        - name: move build to couchdb home
          command: cp -r "{{ build_dir }}/couchdb/rel/couchdb" /opt/couchdb

        - name: make couchdb own his home
          command: chown -R couchdb:couchdb /opt/couchdb/

        - name: make couchdb directories only user and group accessible
          command: find /opt/couchdb -type d -exec chmod 0770 {} \; 

        - name: loosen couchdb config directories permissions
          file: 
            path: "/opt/couchdb/etc/{{ item }}"
            mode: 0644 
          with_items: [default.d, local.d]

    - name: fix couchdb instance name
      become: yes
      template:
        src: vm.args.j2
        dest: /opt/couchdb/etc/vm.args
        owner: couchdb
        group: couchdb
      notify:
        restart couchdb

    - name: configure SSL
      become: yes
      template:
        src: ssl.ini.j2
        dest: /opt/couchdb/etc/local.d/ssl.ini
        owner: couchdb
        group: couchdb
      notify:
        restart couchdb
        
    - name: configure SDA
      become: yes
      template:
        src: sda.ini.j2
        dest: /opt/couchdb/etc/local.d/sda.ini
        owner: couchdb
        group: couchdb
      notify:
        restart couchdb

    - name: Limit erlang ports to support clustering through the Internet
      become: yes
      template:
        src: sys.config.j2
        dest: /opt/couchdb/releases/2.2.0/sys.config
        owner: couchdb
        group: couchdb
      notify:
        restart couchdb

    - name: create couchdb systemd service file
      become: yes
      become_method: sudo
      template:
        src: couchdb.service.j2
        dest: /etc/systemd/system/couchdb.service
      notify:
        restart couchdb

    - name: start and enable couchdb systemd service
      systemd: 
        name: couchdb
        daemon_reload: yes
        enabled: yes
        state: started
      become: yes
      become_method: sudo
      register: systemd_result

    - name: give couchdb some time to start
      pause:
        seconds: 10
      when: systemd_result.changed

    - name: check root account
      uri: 
        url: "{{ local_config_url }}/admins/"
        return_content: yes
      register: root_account
      ignore_errors: true

    - name: check root account with credentials
      uri: 
        url: "{{ local_config_url }}/admins/"
        user: "{{ admin_user }}"
        password: "{{ admin_password }}"
        force_basic_auth: yes
        return_content: yes
      register: used_credentials
      when: root_account.json.error | default(false) and root_account.json.error == "unauthorized"

    - name: add root account
      uri: 
        url: "{{ local_config_url }}/admins/{{ admin_user | quote }}"
        method: PUT
        body: '"{{ admin_password | quote }}"'
      when: used_credentials is skipped and root_account.json == {}
      
    - name: check public access
      uri: 
        url: "{{ local_config_url }}/chttpd/bind_address"
        user: "{{ admin_user }}"
        password: "{{ admin_password }}"
        return_content: yes
        force_basic_auth: yes
      register: bind_address

    - name: set public access
      uri: 
        url: "{{ local_config_url }}/chttpd/bind_address"
        user: "{{ admin_user }}"
        password: "{{ admin_password }}"
        method: PUT
        body: '"0.0.0.0"'
        force_basic_auth: yes
      when: bind_address.json != '0.0.0.0'

    - name: check CORS
      uri: 
        url: "{{ local_config_url }}/httpd/enable_cors"
        user: "{{ admin_user }}"
        password: "{{ admin_password }}"
        return_content: yes
        force_basic_auth: yes
      register: enable_cors

    - name: set CORS
      when: enable_cors.json == "false"
      block:
        - name: enable CORS
          uri:
            url: "{{ local_config_url }}/httpd/enable_cors"
            user: "{{ admin_user }}"
            password: "{{ admin_password }}"
            force_basic_auth: yes
            method: PUT
            body: '"true"'

        - name: enable CORS origins
          uri:
            url: "{{ local_config_url }}/cors/origins"
            user: "{{ admin_user }}"
            password: "{{ admin_password }}"
            force_basic_auth: yes
            method: PUT
            body: '"*"'

        - name: enable CORS credentials
          uri:
            url: "{{ local_config_url }}/cors/credentials"
            user: "{{ admin_user }}"
            password: "{{ admin_password }}"
            force_basic_auth: yes
            method: PUT
            body: '"true"'

        - name: enable CORS methods
          uri:
            url: "{{ local_config_url }}/cors/methods"
            user: "{{ admin_user }}"
            password: "{{ admin_password }}"
            force_basic_auth: yes
            method: PUT
            body: '"GET, PUT, POST, HEAD, DELETE"'

        - name: enable CORS headers
          uri:
            url: "{{ local_config_url }}/cors/headers"
            user: "{{ admin_user }}"
            password: "{{ admin_password }}"
            force_basic_auth: yes
            method: PUT
            body: '"accept, authorization, content-type, origin, referer, x-csrf-token"'

    - name: can ping
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:5984"
        return_content: yes
      register: ping_answer

    - name: ping answer matches format
      fail:
      when: ping_answer.json.couchdb != "Welcome"

    - name: remove build directory 
      file: 
        path: "{{ build_dir }}"
        state: absent
  handlers:
    - name: Restart couchdb service
      become: yes
      become_method: sudo
      systemd:
        name: couchdb
        state: restarted
      ignore_errors: true
      listen: restart couchdb

    - name: Give couchdb time to get back up
      pause:
        seconds: 3
      listen: restart couchdb

- hosts: magare1.otselo.eu
  vars:
    couchdb_url: "http://127.0.0.1:5986"
  tasks:
    - name: get master node databases
      uri:
        url: '{{ couchdb_url }}/_all_dbs'
        user: "{{ admin_user }}"
        password: "{{ admin_password }}"
        force_basic_auth: yes
        return_content: yes
      register: master_dbs

    - name: initial cluster setup
      when: '"_replicator" not in master_dbs.json'
      block:
        - name: initialize cluster
          uri:
            url: '{{ couchdb_url }}/_cluster_setup'
            method: POST
            body: '{"action": "enable_cluster", "bind_address":"0.0.0.0", "username": "{{admin_user}}", "password":"{{admin_password}}", "port": 5984, "node_count": "8", "remote_node": "$NODE", "remote_current_user": "{{admin_user}}", "remote_current_password": "{{admin_password}}" }'
            body_format: json
            user: "{{ admin_user }}"
            password: "{{ admin_password }}"
            force_basic_auth: yes
            status_code: 201

        - name: add magare2 to cluster
          uri:
            url: '{{ couchdb_url }}/_cluster_setup'
            method: POST
            body: {"action": "add_node", "host":'magare2.otselo.eu', "port": "5984", "username": "{{admin_user}}", "password":"{{admin_password}}"}
            body_format: json
            user: "{{ admin_user }}"
            password: "{{ admin_password }}"
            force_basic_auth: yes
            status_code: 201
          ignore_errors: yes # errors with "Document update conflict" on playbook repeat

        - name: finish cluster setup
          uri:
            url: '{{ couchdb_url }}/_cluster_setup'
            method: POST
            body: '{"action": "finish_cluster"}'
            body_format: json
            user: "{{ admin_user }}"
            password: "{{ admin_password }}"
            force_basic_auth: yes
            status_code: 201
